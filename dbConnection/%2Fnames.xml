<?xml version="1.0" encoding="UTF-8"?>
<con:restMockAction name="/names" method="GET" resourcePath="/names" id="b27dc359-88f2-4104-bd9b-66a35b9e74e5" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="b27dc359-88f2-4104-bd9b-66a35b9e74e5fileName">%2Fnames</con:setting></con:settings><con:defaultResponse>error</con:defaultResponse><con:dispatchStyle>PARAMETER</con:dispatchStyle><con:dispatchConfig/><con:dispatchPath>//define request param variables
def firstName = mockRequest.getHttpRequest().getParameter('firstname');
def lastName = mockRequest.getHttpRequest().getParameter('lastname');

//Set custom property values
context.setProperty('queryFirstName', firstName);
context.setProperty('queryLastName', lastName);

//Validate custom property values
log.info(context.getProperty('queryFirstName'))
log.info(context.getProperty('queryLastName'))

if (firstName != null &amp;&amp; lastName != null) {
	return "goodResponse"
} else {
	return "error"
}



/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:dispatchXPath/><con:parameterDispatcherRuleContainer><con:ParameterDispatcherRule><con:ruleName>Rule 1</con:ruleName><con:parameterDispatcherCondition><con:parameterType>QUERY</con:parameterType><con:parameterOperationType>EXISTS</con:parameterOperationType><con:parameterName>firstname</con:parameterName><con:parameterValue/></con:parameterDispatcherCondition><con:parameterDispatcherCondition><con:parameterType>QUERY</con:parameterType><con:parameterOperationType>EXISTS</con:parameterOperationType><con:parameterName>lastname</con:parameterName><con:parameterValue/></con:parameterDispatcherCondition><con:responseName>goodResponse</con:responseName></con:ParameterDispatcherRule></con:parameterDispatcherRuleContainer><con:routeScript/><con:response name="goodResponse" id="70d202b8-be0b-49a4-b52c-d55743884b7c" httpResponseStatus="200" dataSource="DataSource 1" mediaType="application/json"><con:settings/><con:script>def firstName = mockRequest.getHttpRequest().getParameter('firstname').value.toString();
def lastName = mockRequest.getHttpRequest().getParameter('lastname').value.toString();

context.setProperty('queryFirstName', firstName);
context.setProperty('queryLastName', lastName);

log.info(context.getProperty('queryFirstName'))
log.info(context.getProperty('queryLastName'))</con:script><con:responseContent>{
   "playerid": "${#MockResponse#players_id}",
   "firstname": "${#MockResponse#players_firstname}",
   "lastname": "${#MockResponse#players_lastname}"
}</con:responseContent></con:response><con:response name="error" id="f9e055a3-eaf5-42a5-b666-9cf17dda3657" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"status": "404",
	"message": "bad request"
}</con:responseContent></con:response></con:restMockAction>